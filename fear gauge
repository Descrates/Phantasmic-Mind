using System.Collections;
using System.Collections.Generic;
using UnityEngine;
					//about as extra unneccecary long as it gets
public class fearGaugeCalculator: MonoBehaviour {

	private bool alcoholFMincd = false;
	private bool antiDepressionFMincd = false;
	public bool awoken = false;
	public bool fearGaugeForMathFull = false;
	private bool fearUpgradeLevelChange = false;
	public float fearGaugeForMathDisplay = 0;
	public float fearGaugeForMathMax = 100;
	public bool partyMemberDied = false;
	private bool ranAway = false;
	private string fearUpgradeLevel = "1";
	public float antiDepressionFMin = 0;
	public float alcoholFMin = 0;
	private float killedEnemy = 0;
	private float fearStepCounter = 1;
	public int newEnemyFear = 0;
	public bool newAreaFear = false;
	public float fearGaugeForMath = 100f;
	Henry playerInstance;

	//https://docs.unity3d.com/ScriptReference/MonoBehaviour.StartCoroutine.html pretty cool
	IEnumerator acchecker ()
	{
		if (playerInstance.alcohol == true) {
			alcoholFMin = 1;
			alcoholFMincd = true;
			yield return new WaitUntil (() => playerInstance.alcohol == false);
			alcoholFMincd = false;
		}
	}

	IEnumerator adchecker ()
	{
		if (playerInstance.antiDepression == true) {
			antiDepressionFMin = 1;
			antiDepressionFMincd = true;
			yield return new WaitUntil (() => playerInstance.antiDepression == false);
			antiDepressionFMincd = false;
		}

	}

	void Update () {
		playerInstance = GetComponent<Henry> ();
		//--------------------------------
		if (alcoholFMincd == false) {
			if (playerInstance.alcohol == true) {
				StartCoroutine (acchecker ());
			}
		}
		if (antiDepressionFMincd == false) {
			if (playerInstance.antiDepression == true) {
				StartCoroutine (adchecker ());
			}
		}
		//--------------------------------
		//ded checker
		if (fearGaugeForMath < 1) {
			fearGaugeForMathFull = true;
			fearGaugeForMathDisplay = fearGaugeForMathMax;
		}
		//--------------------------------
		//more fear capacity per level
		if (fearUpgradeLevelChange == true) {
			switch (fearUpgradeLevel) {
			case "1":
				fearGaugeForMathMax = 100;
				fearGaugeForMath *= 1.3f;
				fearGaugeForMathDisplay = fearGaugeForMathMax - fearGaugeForMath;
				break;
			case "2":
				fearGaugeForMathMax = 200;
				fearGaugeForMath *= 1.3f;
				fearGaugeForMathDisplay = fearGaugeForMathMax - fearGaugeForMath;
				break;
			case "3":
				fearGaugeForMathMax = 250;
				fearGaugeForMath *= 1.3f;
				fearGaugeForMathDisplay = fearGaugeForMathMax - fearGaugeForMath;
				break;
			case "4":
				fearGaugeForMathMax = 270;
				fearGaugeForMath *= 1.3f;
				fearGaugeForMathDisplay = fearGaugeForMathMax - fearGaugeForMath;
				break;
			case "5":
				fearGaugeForMathMax = 300;
				fearGaugeForMath *= 1.3f;
				fearGaugeForMathDisplay = fearGaugeForMathMax - fearGaugeForMath;
				break;
			case "6":
				fearGaugeForMathMax = 310;
				fearGaugeForMath *= 1.3f;
				fearGaugeForMathDisplay = fearGaugeForMathMax - fearGaugeForMath;
				break;
			}
		}
		//-------------------------------
		//fear can not go above capacity
		if (fearGaugeForMath > fearGaugeForMathMax) {
			fearGaugeForMath = fearGaugeForMathMax;
		}
		//-------------------------------
		//fear can be toooooo bad
		if (fearGaugeForMathDisplay > fearGaugeForMathMax) {
			fearGaugeForMathDisplay = fearGaugeForMathMax;
		}
		//this is added at the end of every time fearGaugeForMath or fearGaugeForMath max is calculated becaue my for (i) statement instantly crashes unity
		//-------------------------------
		//death slowly - fear increasing factors
		//-------------------------------
		//sets the amount of fear you gain from either normal enemies or bosses
		if (fearGaugeForMathFull == false) {
			if (newEnemyFear == 0) {
				fearGaugeForMath = fearGaugeForMath;
				fearGaugeForMathDisplay = fearGaugeForMathMax - fearGaugeForMath;
			} else if (newEnemyFear == 1) {
				fearGaugeForMath -= 5;
				fearGaugeForMathDisplay = fearGaugeForMathMax - fearGaugeForMath;
			} else if (newEnemyFear == 2) {
				fearGaugeForMath -= 10;
				fearGaugeForMathDisplay = fearGaugeForMathMax - fearGaugeForMath;
			}
			//--------------------------------
			//Running away from fights is bad
			if (ranAway == true) {
				fearGaugeForMath -= 15;
				ranAway = false;
			}
			//--------------------------------
			//Afraid of the unknown
			if (newAreaFear == true) {
				fearGaugeForMath -= 10;
				newAreaFear = false;
				fearGaugeForMathDisplay = fearGaugeForMathMax - fearGaugeForMath;
			}
			//--------------------------------
			//save your friends or else
			if (partyMemberDied == true) {
				fearGaugeForMath -= 15;
				partyMemberDied = false;
				fearGaugeForMathDisplay = fearGaugeForMathMax - fearGaugeForMath;
			}
			//--------------------------------
			//spookystepcount
			//come back to this
			//--------------------------------
			//saving graces - fear decreasing factors
			//--------------------------------
			//facing fears 1-normal enemy 2-biggo bosso
			if (killedEnemy == 1) {
				fearGaugeForMath += 1;
				killedEnemy = 0;
				fearGaugeForMathDisplay = fearGaugeForMathMax - fearGaugeForMath;
			}
			if (killedEnemy == 2) {
				fearGaugeForMath += 15;
				killedEnemy = 0;
				fearGaugeForMathDisplay = fearGaugeForMathMax - fearGaugeForMath;
			}
			//--------------------------------
			//antidepressants and alcohol are good for you
			if (antiDepressionFMin == 1) {
				fearGaugeForMath += 10;
				antiDepressionFMin = 0;
				fearGaugeForMathDisplay = fearGaugeForMathMax - fearGaugeForMath;
			}
			if (alcoholFMin== 1) {
				fearGaugeForMath += 15;
				alcoholFMin = 0;
				fearGaugeForMathDisplay = fearGaugeForMathMax - fearGaugeForMath;
			}
		}
		//---------------------------------
		//waking up from ash and dust
		if (awoken == true) {
			fearGaugeForMath = fearGaugeForMathMax;
			fearGaugeForMathFull = false;
			awoken = false;
		}
	}
}
